// Generated by CoffeeScript 1.7.1
(function() {
  var Bodies, Body, Bounds, Composites, Constraint, Engine, Events, MouseConstraint, Vector, World, createPlayer, engine, keysPressed, killPlayer, level, playerA, playerAStartPosition, playerB, playerBStartPosition, playerInfo, updateKeyList;

  Engine = Matter.Engine;

  Events = Matter.Events;

  World = Matter.World;

  Body = Matter.Body;

  Bodies = Matter.Bodies;

  Bounds = Matter.Bounds;

  Constraint = Matter.Constraint;

  Composites = Matter.Composites;

  MouseConstraint = Matter.MouseConstraint;

  Vector = Matter.Vector;

  engine = Engine.create(document.body, {
    render: {
      options: {
        showAngleIndicator: false,
        hasBounds: true,
        wireframes: false,
        showCollisions: false,
        background: '/images/jump/img/bg.png'
      }
    }
  });

  engine.world.gravity.y = 1;

  playerInfo = {};

  playerAStartPosition = {
    x: engine.render.options.width / 4,
    y: engine.render.options.height / 4
  };

  playerBStartPosition = {
    x: engine.render.options.width / 4 * 3,
    y: engine.render.options.height / 4
  };

  createPlayer = function(startPosition, playerID, texture) {
    var body;
    body = Bodies.circle(startPosition.x, startPosition.y, 20, {
      id: playerID,
      restitution: 1.4,
      render: {
        sprite: {
          texture: texture
        }
      }
    });
    body.label = "Player";
    return body;
  };

  playerA = createPlayer(playerAStartPosition, "playerA", "/images/jump/img/kenny/HUD/hud_p3.png");

  playerInfo.playerA = {
    player: playerA,
    score: 0,
    startPosition: playerAStartPosition
  };

  playerB = createPlayer(playerBStartPosition, "playerB", "/images/jump/img/kenny/HUD/hud_p2.png");

  playerInfo.playerB = {
    player: playerB,
    score: 0,
    startPosition: playerBStartPosition
  };

  keysPressed = {};

  updateKeyList = function(e) {
    e = e || event;
    return keysPressed[e.keyCode] = e.type === 'keydown';
  };

  $(document.body).keydown(updateKeyList);

  $(document.body).keyup(updateKeyList);

  killPlayer = function(deadPlayerID) {
    var details, playerID;
    for (playerID in playerInfo) {
      details = playerInfo[playerID];
      World.remove(engine.world, details.player);
      details.player = createPlayer(details.startPosition, details.player.id, details.player.render.sprite.texture);
      World.add(engine.world, details.player);
      if (playerID !== deadPlayerID) {
        console.log(playerID, deadPlayerID, details.score);
        details.score += 1;
      }
    }
    return updateScore(playerInfo.playerA.score, playerInfo.playerB.score);
  };

  Events.on(engine, "collisionStart", function(e) {
    var pair, player, theyDead, _i, _len, _ref, _results;
    theyDead = function(bodyA, bodyB) {
      return bodyA.label === "Player" && /lava/i.test(bodyB.label);
    };
    _ref = e.pairs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pair = _ref[_i];
      if (theyDead(pair.bodyA, pair.bodyB) || theyDead(pair.bodyB, pair.bodyA)) {
        if (pair.bodyA.label === "Player") {
          player = pair.bodyA;
        }
        if (pair.bodyB.label === "Player") {
          if (player == null) {
            player = pair.bodyB;
          }
        }
        killPlayer(player.id);
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  Events.on(engine, "beforeTick", function() {
    var details, outOfBounds, player, velocity, _results;
    outOfBounds = function(x, y) {
      var max, min;
      min = engine.world.bounds.min;
      max = engine.world.bounds.max;
      return x < min.x || x > max.x || y < min.y || y > max.y;
    };
    _results = [];
    for (player in playerInfo) {
      details = playerInfo[player];
      velocity = Vector.magnitude(details.player.velocity);
      if (velocity > 30) {
        Body.applyForce(details.player, details.player.position, Vector.div(Vector.normalise(Vector.neg(details.player.velocity)), 50));
      }
      if (outOfBounds(details.player.position.x, details.player.position.y)) {
        _results.push(killPlayer(player));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  Events.on(engine, "beforeTick", function() {
    var key, moveAmount, movePlayer, status, _results;
    moveAmount = 0.001;
    movePlayer = function(body, x, y) {
      return Body.applyForce(body, body.position, {
        x: x,
        y: y
      });
    };
    playerA = playerInfo.playerA.player;
    playerB = playerInfo.playerB.player;
    _results = [];
    for (key in keysPressed) {
      status = keysPressed[key];
      if (!status) {
        continue;
      }
      if (key === "87") {
        movePlayer(playerA, 0, -moveAmount);
      }
      if (key === "83") {
        movePlayer(playerA, 0, moveAmount);
      }
      if (key === "65") {
        movePlayer(playerA, -moveAmount, 0);
      }
      if (key === "68") {
        movePlayer(playerA, moveAmount, 0);
      }
      if (key === "38") {
        movePlayer(playerB, 0, -moveAmount);
      }
      if (key === "40") {
        movePlayer(playerB, 0, moveAmount);
      }
      if (key === "37") {
        movePlayer(playerB, -moveAmount, 0);
      }
      if (key === "39") {
        _results.push(movePlayer(playerB, moveAmount, 0));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });

  World.add(engine.world, [playerA, playerB]);

  Engine.run(engine);

  setupCamera(engine, 0.5);

  spriteSheetRenderer(engine);

  level = "first";

  level = "second";

  level = "third";

  level = "fourth";

  mapLoader(level, engine, function() {
    return updateScore(0, 0);
  });

}).call(this);
