// Generated by CoffeeScript 1.7.1
(function() {
  var textures;

  textures = {
    hud_0: {
      x: 230,
      y: 0,
      width: 30,
      height: 38
    },
    hud_1: {
      x: 196,
      y: 41,
      width: 26,
      height: 37
    },
    hud_2: {
      x: 55,
      y: 98,
      width: 32,
      height: 38
    },
    hud_3: {
      x: 239,
      y: 80,
      width: 28,
      height: 38
    },
    hud_4: {
      x: 238,
      y: 122,
      width: 29,
      height: 38
    },
    hud_5: {
      x: 238,
      y: 162,
      width: 28,
      height: 38
    },
    hud_6: {
      x: 230,
      y: 40,
      width: 30,
      height: 38
    },
    hud_7: {
      x: 226,
      y: 206,
      width: 32,
      height: 39
    },
    hud_8: {
      x: 192,
      y: 206,
      width: 32,
      height: 40
    },
    hud_9: {
      x: 196,
      y: 0,
      width: 32,
      height: 39
    }
  };

  window.updateScore = function(playerAScore, playerBScore) {
    var displayScore, playerAOffset, playerBOffset, spriteSheet;
    spriteSheet = "/Images/jump/img/kenny/HUD/hud_spritesheet.png";
    window.scenery = window.scenery.filter(function(scenery) {
      return scenery.label !== "Score";
    });
    playerAOffset = {
      x: 100,
      y: -30
    };
    playerBOffset = {
      x: 575,
      y: -30
    };
    displayScore = function(score, offset) {
      var body, number, texture, _i, _len, _ref, _results;
      _ref = score.toString().split("");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        number = _ref[_i];
        texture = textures["hud_" + number];
        body = {
          label: "Score",
          render: {
            spriteSheet: spriteSheet,
            texture: texture,
            tile: {
              rotation: 0
            }
          },
          position: {
            x: offset.x,
            y: offset.y
          }
        };
        offset.x += texture.width;
        _results.push(window.scenery.push(body));
      }
      return _results;
    };
    displayScore(playerAScore, playerAOffset);
    return displayScore(playerBScore, playerBOffset);
  };

}).call(this);
